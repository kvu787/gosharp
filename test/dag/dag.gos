// We want to compute a result modeled as a directed acyclic graph of dependent
// (DAG) computations. This type of computations appers in many different
// contexts, from training neural networks to compiling programs.
//
// One cool feature is that async takes arbitrary Go expressions
// not just function calls.
//
// This demo runs a computation graph. Observe how the parallel version runs
// several computations simultaneously.
//
// usage: ./dag async   # for parallel
//        ./dag         # for sequential
package main

import (
	"fmt"
	"math/rand"
	"os"
	"time"
)

func main() {
	runtime.GOMAXPROCS(runtime.NumCPU())
	fmt.Println("Using", runtime.NumCPU(), "cpus")

	if len(os.Args) > 1 && os.Args[1] == "async" {
		fmt.Println("Running computation DAG in parallel")
		a := async(Compute("a"))
		b := async(Compute("b"))
		c := async(a + b)
		d := async(a * c)
		e := async(Compute("e"))
		f := async(Compute("f"))
		g := async(Compute("g", e*f-d))
		h := async(Compute("h", a, b, f))
		fmt.Println(g)
		fmt.Println(h)
	} else {
		fmt.Println("Running computation DAG sequentially")
		a := (Compute("a"))
		b := (Compute("b"))
		c := (a + b)
		d := (a * c)
		e := (Compute("e"))
		f := (Compute("f"))
		g := (Compute("g", e*f-d))
		h := (Compute("h", a, b, f))
		fmt.Println(g)
		fmt.Println(h)
	}
}

// Compute waits for a random duration of time up to n seconds and
// returns a random number.
func Compute(name string, inputs ...int) int {
	rng := rand.New(rand.NewSource(time.Now().UnixNano()))
	result := 1
	for _, input := range inputs {
		result *= input
	}
	ticker := time.NewTicker(time.Duration(30+rng.Intn(20)) * time.Millisecond)
	for i := 0; i < 10+rng.Intn(10); i++ {
		<-ticker.C
		fmt.Println(name, smul(".", i))
	}
	fmt.Println(name, "done")
	return result * rng.Int()
}

// smul returns a string with n concatenations of s.
func smul(s string, n int) string {
	retval := ""
	for i := 0; i < n; i++ {
		retval += s
	}
	return retval
}
